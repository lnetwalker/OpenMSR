program DeviceServer;
{$mode objfpc}
uses PhysMach,webserver,cthreads,classes,crt;

{ $Id$ }

{ This software is copyright (c) 2008 by Hartmut Eilers <hartmut@eilers.net> 	}
{ It is distributed under the terms of the GNU GPL V2 see http://www.gnu.org 	}

{ 20.02.2008		Start of project					}



const
	Forever=false;
	MaxThreads=25;
	BLOCKED=true;
	NOTBLOCKED=false;
	debug=false;
	TimeOut=500;

var
	i		: LongInt;
	ThreadHandle	: array[1..MaxThreads] of LongInt;
	ThreadName	: array[1..MaxThreads] of string;
	shutdown	: Boolean;
	Counter		: LongInt;
	IOGroup		: LongInt;
	ProtectParams	: TRTLCriticalSection;




function AnalogReader(p: Pointer):LongInt;
begin
	writeln('started Analog Reader Thread..');
	repeat
		PhysMachReadAnalog;
		delay(100);
	until shutdown=true;
	writeln('Analog Reader going down..');
end;



function DigitalReader(p: pointer):LongInt;
begin
	writeln('started Digital Reader Thread..');
	repeat
		PhysMachReadDigital;
		delay(100);
	until shutdown=true;
	writeln('Digital Reader going down..');
end;



function CounterReader(p: pointer):LongInt;
begin
	writeln('started Counter Reader Thread..');
	repeat
		PhysMachCounter;
		delay(100);
	until shutdown=true;
	writeln('Counter Reader going down..');
end;


				{ Webserver Thread Sarts here }
procedure embeddedWebReadParams;
{ handles any parameters in this case the prameter is always the io_group }
var Url,Params :string;
begin
	EnterCriticalSection(ProtectParams);
	Url:=GetURL;
	Params:=GetParams;
	val(params,IOGroup);
	LeaveCriticalSection(ProtectParams);
	if debug then begin
		writeln('embeddedWeb:> Got Parameters');
		writeln('URL=',Url,' Parameters=',Params);
	end;
end;



procedure DeliverAnalogValues;
{ called whenever the analog special page is called }
var
	ValueString,SeitenStart,SeitenEnde,Seite,Values	: string;

begin
	inc(Counter);
	SeitenStart:='<html><body>';
	SeitenEnde:=' </body></html>';
	Values:='';
	for i:=1 to 8 do begin
		str(analog_in[i],ValueString);
		Values:=Values+' '+ValueString;
	end;
	Seite:=SeitenStart+Values+SeitenEnde;
	if debug then writeln('embeddedWeb:>Sending Page');
	SendPage(Seite);
	if debug then writeln('embeddedWeb:>Page Send, finished');
end;


procedure DeliverDigitalValues;
{ calle whenever the digital reader page is called }
var
	SeitenStart,SeitenEnde,Seite,Values	: string;

begin
	inc(Counter);
	SeitenStart:='<html><body>';
	SeitenEnde:=' </body></html>';
	Values:='';
	for i:=1 to 8 do
		if eingang[i] then Values:=Values+' '+'1'
		else Values:=Values+' '+'0';
	Seite:=SeitenStart+Values+SeitenEnde;
	if debug then writeln('embeddedWeb:>Sending Page');
	SendPage(Seite);
	if debug then writeln('embeddedWeb:>Page Send, finished');
end;


function WebserverThread(p: Pointer):LongInt;
{ the real serving thread }

begin
	writeln('started Webserver Thread, going to start Server...');
	{ start the webserver with IP, Port, Document Root and Logfile }
	start_server('127.0.0.1',10080,BLOCKED,'./docroot/','./pwserver.log');
	writeln;writeln('Webserver started, ready to serve');
	{ register the variable handler }
	SetupVariableHandler(@embeddedWebReadParams);
	{ register special URL for content generated by this program }
	SetupSpecialURL('/analog/values.html',@DeliverAnalogValues );
	SetupSpecialURL('/digital/values.html',@DeliverDigitalValues );

	repeat
		serve_request;
		delay(100);
	until Shutdown=true;
	writeln('Webserver going down..');
	WebserverThread:=0;

end;					{ Webserver Thread end }


begin					{ Main program }
	// initialize Hardware
	PhysMachInit;
	PhysMachloadCfg('DeviceServer.cfg');
	writeln('detected Hardware: ',HWPlatform);
	PhysMachWriteDigital;

	Counter:=0;
	i:=1;
	InitCriticalSection(ProtectParams);
	writeln('starting AnalogReader..');
	ThreadName[i]:='AnalogReader';
	ThreadHandle[i]:=BeginThread(@AnalogReader,pointer(i));
	inc(i);
	writeln('starting DigitalReader..');
	ThreadName[i]:='DigitalReader';
	ThreadHandle[i]:=BeginThread(@DigitalReader,pointer(i));
	inc(i);
	writeln('starting CounterReader..');
	ThreadName[i]:='CounterReader';
	ThreadHandle[i]:=BeginThread(@CounterReader,pointer(i));
	inc(i);
	writeln('Starting Webserver Thread...');
	ThreadName[i]:='Webserver';
	ThreadHandle[i]:=BeginThread(@WebserverThread,pointer(i));


	repeat
		delay(500);
	until keypressed;
	shutdown:=true;
	WaitForThreadTerminate(ThreadHandle[1],TimeOut);
	WaitForThreadTerminate(ThreadHandle[2],TimeOut);
	WaitForThreadTerminate(ThreadHandle[3],TimeOut);
	WaitForThreadTerminate(ThreadHandle[4],TimeOut);
	DoneCriticalSection(ProtectParams);
end.
