%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

                                StrWrap1

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


--------------------------------------------------------------------------------
 License:
--------------------------------------------------------------------------------
  NRCOL (public domain)

--------------------------------------------------------------------------------
 Description:
--------------------------------------------------------------------------------

  String functions to make getting data out of a text files easy, without using 
  stringlists, sysutils, or other bulk.

  NOTE: See the todo list for functions planned for the future.


  Introduction:
  -------------

    Sometimes you find yourself using StringLists when in fact all you need is a
    simple string. This unit is essentially a wrapper for readln, assign, reset 
    (annoying lower level I/O code).

    Without using a StringList.. Have you ever wanted to just..

     -load a complete file directly into a regular string var, without all the
      hassles of readln, assign, rewrite, reset, strlist.create,
      strlist.loadfromfile ?

     -grab a specific line N from a text file directly and precisely, without
      using stringlist.strings[0] or excessive readln hassles.

     -Load a file directly into an array of strings, immediately.

     -Load the first N lines directly into an array of strings, without loading
      entire file into memory like a stringlist ineffeciently does.

     -Load the first N lines of a file directly into a string instead of array

     -plus more


  Speed, Compact Size
  -------------------

    Some functions have been tested to be ten times as fast as stringlists in
    certain situations (i.e. StrLoadFile). Some functions have not been tested
    for speed.
    
    However, premature optimizations aside, the other beauty of these functions
    is that sometimes they are quicker and cleaner than using this bulky code:
    
    Tstringlist.create;
    sl.loadfromfile('somefile');
    ...sl.strings[i]....
    sl.free;
    sl:= nil;
    
    Create and free bloats up the code with noise - all we wanted to do was
    grab the first line or some line in the file.
    
    Although this unit will be optimized for speed, and is sometimes faster than
    stringlists, it was geared toward convenience. .

    Stringlists, TStreams etc. are still useful of course in many situations
    where you need that bulk and power. This unit is not always replacement
    for them, rather just a convenient option for you.

    (also see CompactUtils.pas for a compact and powerful classes and sysutils
     partial replacement!)


  Use this unit with:
  -------------------

    Sometimes StrLoadFile and etc. work well along with stringlists, classes,
    sysutils, too. Don't be afaid to use this unit even if you are using
    stringlists and classes already. StrLoadFile for example comes in handy
    in all sorts of situations whether you are using classes or not.
    
    Example:
    
      stringlist1.text:= StrLoadFile('somefile');
      
    This may be faster than
       stringlist1.loadfromfile('somefile');
    Since strloadfile is optimized for speed, and stringlists aren't always.


--------------------------------------------------------------------------------
 To do:
--------------------------------------------------------------------------------

 General
 -------

  -StrAddLine
    Add a new line (and string contents) to another string
    Differs from append, since adding means a brand new line is started.

  -FileAddLine
    Add a new line (and string contents) to a file
    Differs from append, since adding means a brand new line is started.

  -StrAppendFile
    Append file contents to string in one shot (concatenate file to string)

  -FileAppendStr
    Append string to file in one shot (concatenate string to file)

  -ArrayLoadLastLines:
    A function that grabs N amount of lines from a file, starting backwards.
    Place into Array of strings. Start array at 1

  -ArrayLoadLastLines_0
    Same as above except start array at 0.
   
  -StrLoadLastLines
    Same as ArrayLoadLastLines, but place lines into string var
  
  -Optional error checking? Let the coder check if file exists first? Not sure
   if this would be a useful feature.

  -optimize for speed.
   Some functions could be optimized

  -error check on number of lines a file contains. If the file contains less
   lines than specified, report error. Not sure if this would be useful.

  -maybe submit some functions to RTL or StrUtils if they are useful as generic
   string functions that people use often.

  - convert exit('return value') to be compatible with delphi 5 by using result
    instead of exiting with a parameter 

 Ideas to consider:
 ------------------

  -a shortstring version. maybe some people want to use shortstrings. Small
   settings files may only have short lines inside them which may need not more
   than 255 characters.

--------------------------------------------------------------------------------
 History, and notes:
--------------------------------------------------------------------------------


 November 2005
 -------------

 -Version F contains a new speed improvement for StrLoadFile
  Unit now also contains a new functions called StrSaveFile, GetLastLns.
 
 -Version 1.0F put on SVN.
  1.0E-JKP changes merged to 1.0F

 -Version 1.0E-JKP
    Removed SysUtils dependency.
    Replaced with platform-specific versions of GetFileSize() and moved all
    calls to assign(f, filename); reset(F); to a single OpenFile() function
    that also handles the I/O checking, and thus eliminates the need for
    the FileExists() calls.

    GetLineCount() and GetFileSize() now return -1 on error, to distinguish
    error conditions from a file that is simply empty.

    Also removed a bit of lint to shut up some of the compiler hints/warnings.

 -JKP aka YetAnotherGeek joins the project :)

 -Version E contains a GetLineCount function.

 -Version E now contains a better function/type naming scheme.
  We use underscores to describe a function that has a special purpose if it
  is very similar to another function. (instead of overloading)

  Examples of the new naming scheme:

    -See StrArray_c versus the old StrAryB.
     The "c" suffix means we have a count variable available.

    -See ArrayLoadFile_0 versus the old Array0LoadFile
     The zero suffix means the array starts at 0 rather than 1

  The suffixes at the end of the function are more clear than the old naming
  scheme. Underscores serve the purpose of describing what is special about
  the function via a suffix or prefix. That's what underscores should be used
  for, contrary to an Ansi C programmers belief of abusing them everywhere,
  just because it "feels" right.


 Old History 2005
 ----------------

 -Version 1.0E released
  more functions added plus some naming scheme changes.
 
 -Version 1.0D released
  more functions added
  
 -Version 1.0C released
  more functions added
  
 -Version 1.0B released
  more functions added
  
 -Version 1.0A released
 
 -Lars aka L505 starts project :)


--------------------------------------------------------------------------------
 Authors, contributors
--------------------------------------------------------------------------------

  -Lars aka L505
   http://z505.com

  -JKP aka YetAnotherGeek

  If anyone is interested, please feel free to contribute to this unit.
  The sources will be on SVN

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
