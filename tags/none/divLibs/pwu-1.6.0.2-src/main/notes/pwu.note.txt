--------------------------------------------------------------------------------
 Developer Notes
--------------------------------------------------------------------------------

 PSP 1.6.x
 ---------

  [28/JAN/2006 - L505]

   - minimum program size on linux increased because of added code for checking
     library path in PWU.conf. A few kilobytes will not hurt us too bad.
     (31-33kb minimum cgi program on linux  versus a previous 29kb world record)

   - added functionality for PWU library path to be stored in config file
     Path will be Line 1 of PWU.conf, similar to a bash script which has the
     bash path on the first line. Currently cgi program won't continue further
     if the path to the PSP/PWU library is not found in the config file. In the
     future maybe we will search local directory if no path is found in PWU.conf
     but that entails more abstraction, logic, bloat, etc.
     
  [24/JAN/2006 - L505]
  
   - added include files for debugging. Keeps the source code neat, otherwise
     debugging ifdef's make the source code cluttered and messy. Not all include
     files are finished, each get procaddress call should have  an include file.

   - added Trustmaster's memory manager trick, so we don't need any CMEM
   
  [15/JAN/2006 - L505]

   - started work on PSP 1.6.X runtime (runtime loading dll) declarations, which
     will be more useful than the load time static DLL.
     Initialization/finalization can  occur with a run time loading DLL, and it
     is much more customizable than the static run time style DLL.

  [09/JAN/2006 - L505]

   -started work on PSP 1.6.X load time (static dll) declarations


--------------------------------------------------------------------------------
  Developer Extra Notes
--------------------------------------------------------------------------------

  - I thought of new idea to decrease the load time of the dynamic library.
    Since many web programs will only use some of the functions in the DLL,
    and not all of them, loading every single proc address with getprocaddress
    does not make much sense. In this case, although it will be slightly more
    work for the developer using PSP, he can simple call an include file per
    each function he is using, and place this include directive in the
    initialization section of his program.

    {$i GetWebVar.inc}
    {$i WebWriteLn.inc}
    {$i WebWrite.inc}
    {$i WebTemplateout.inc}

    Each include file will force a getprocaddress on the procedure the developer
    wishes to use. This is just an idea. How else does one stop the developer
    from pulling in all the proc addresses when he doesn't need them? There
    is static linking, but static linking is not appropriate for the PSP library
    since we are loading PSP library from a custom path on the server.

    The include file setup above would mean that any time the PSP developer
    wanted to use a function, he would declare it like in the above in his
    initialization section, and upon initialization the procaddress would be
    obtained so that his functions were ready to use (instead of putting
    PWU in the uses clause, which would force every single function to call
    getprocaddress even if he was only using one function in the entire library)
    
    It is less convenient than just doing this:

    uses
      pwu;
      
    But it will be an option for people who maybe have more busy servers and
    for those who maybe are worried more about performance (actually this include
    setup will also decrease executable size too). The include file setup may
    not be required in the future but just an option to think about.

  - Errors are by number. Errors are kept as numbers to reduce executable size.
    Programmer using PSP/PWU should print out an error chart and look up the error
    code he is given. Once the library is loaded, the programmer will receive
    a polite and verbose error. If the library is not loaded, or cannot find
    PWU.conf file on loading, he will receive an error code (number).

  - Combining types does not seem to save any executable bytes

  - Changing all constant strings to vars does save lots of bytes

  - changing constant strings to vars and adding them with another string
    does not save bytes like if they were alone with no concatenation

  - statically linking in the procedures/functions caused the executable
    to be about 50K, whereas dynamically linking the functions caused exe
    to be about 30K. Statically linking (load time linking) therefore causes
    20KB of extra space in the exe.
    
  - error checking per each procedure getprocaddress adds a lot of kilobytes
    to the executable. For now, only error checking that is done is the check to
    see if the library was found and loaded.
    
--------------------------------------------------------------------------------
  Developer Todo
--------------------------------------------------------------------------------
   -make it optional where pwu_lib.dll or libpwu_lib.so is stored. i.e. in
   PWU.conf configuration file, allow user to specify library location.
   User should store one copy of the library on the server in somewhere like
   /cgi-bin/pwulib/

   -load by index? possible for faster loading versus load by proc name?

   - convert functions to stdcall? Some are not stdcall
