Návod k pou¾ití qgtk2.pas




1. základní struktura programu

procedure qstart(wcaption : string; onkey, ondestroy : Tprocedure);
procedure qdestroy;
procedure qGo;

- qStart inicializuje gtk a vytvoøí hlavní okno qMainWindow s nadpisem wcaption.
  Procedura onkey mù¾e zpracovávat stisknutí kláves, stisknutý znak
  nalezneme v promìnné qkey, kód klávesy v qkeykode. Kódy kláves
  esc, enter a ¹ipky jsou v konstantách qkEnter, qkEsc, qkUp, qkLeft... 
  Procedura ondestroy probíhá pøi pokusu o ukonèení programu,
  nastavíme-li v ní promìnou qCanDestroy na false program se neukonèí.
  Pøíkaz qdestroy ukonèuje program, qGo spou¹tí hlavní progamovou smyèku gtk.



2. menu a uspoøádání komponent
  
procedure qmnu(caption : string);
procedure qsubmnu(caption : string; proc : tprocedure);

- procedura qmnu vytvoøí jednu polo¾ku v li¹tì menu, klikneme-li na ni,
  uká¾í se polo¾ky urèené voláními procedury qSubmnu, které následují
  po volání pøíslu¹ného qmnu. Pøi volání procedury qsubmnu se odkaz na proceduru
  proc uvádí znakem @. (Podobnì se uvádìjí v proceduøe qButton odkazy 
  na procedury volané pøi stisknutí tlaèítka.) Zaèíná-li popis polo¾ky 
  v submenu pomlèkou, bude tato polo¾ka oddìlena od ostatních vodorovnou èarou. 
  (viz tutorial - qdialog.pas)

procedure qNextRow;
procedure qNextRowResize;
procedure qNextRowLeft;
procedure qseparator; 
procedure qFrame; 
procedure qEndFrame;

- slou¾í k uspoøádání komponent v oknì.
  Voláním procedur jednotlivých komponent (qlabel, qbutton, ...)
  se pøíslu¹né komponenty umis»ují vedle sebe v jedné øádce zleva 
  do prava v tom poøadí, jak jsou procedury volány.
  Po zavolání procedury qNextRow se následující komponenty  
  vytáøejí na novém øádku. Procedura qFrame umo¾òuje seskupovat komponenty
  do sloupcù. Volání qFrame zahajuje nový sloupec, chceme-li ve sloupci øadit
  komponenty pod sebe, musíme je oddìlovat opìt pomocí qNextRow. Procedurou
  qEndFrame sloupce ukonèíme a dal¹í komponenty se øadí normálnì na øádek
  pod sloupce. (viz tutorial, qpack.pas a qpack2.pas).



3. label a editaèní vstup

function qlabel( caption :string) : qWidget; 
function qlabelWrap(caption :string; width : integer) : qWidget;
procedure qlabelset(labl : qWidget ; caption: string);

- qlabel vytváøí label, qlabelWrap víceøádkový label dané ¹íøky.
  qlabelset nastavuje na daný label nový text.
  
function qlabelXpm( xpmFile :string) : qWidget;
function qlabelXpm_d(Data : ppgchar) : qWidget;

- vytváøí label s obrázkem naèteným buï z xpm souboru, nebo z dat
  v programové jednotce vytvoøené programen xpm2pas.
  
function qedit(text: string) : qWidget;
procedure qeditset(edit : qWidget ; text: string);
function qeditget(edit : qWidget) : string;

- editaèní vstupní øádek.



4. tlaèítka

function qbutton( caption : string; proc : tprocedure  ) : qWidget;
function qbuttonXpm(xpmFile, hint : string; proc : tprocedure  ) : qWidget;
function qbuttonXpm_d(Data: ppgchar; hint: string; proc: tprocedure): qWidget;

- tlaèítko s nadpisem caption, nebo s xpm obrázkem (obrázek buï z xpm souboru,
  nebo z dat z programové jednotky vytvoøené programen xpm2pas ).

function qbuttonToggle( caption : string; proc : tprocedure  ) : qWidget;
function qToggleGetA(button : qWidget) : boolean; 
procedure qToggleSetA(button : qWidget); 
procedure qToggleSetN(button : qWidget);

- pøepínací tlaèítko, qToggleGetA je true kdy¾ je tlaèítko aktivní (stisknuté)
  qToggleSetA nastaví tlaèítko aktivní, qToggleSetN nastaví ho neaktivní.
  


5. text

function qtext(width, height : integer; onchange : Tprocedure) : qWidget;
function qtextlength(txt : qWidget) : longint; 
procedure qtextsetp(txt : qWidget; i : longint); 
function qtextgetp(txt : qWidget) : longint; 
procedure qtextinsert( txt : qWidget; text : string);
procedure qtextdel(txt : qWidget; startp, endp : longint); 
procedure qtextaddline( txt : qWidget; text : string);   
function qtextstring(txt : qWidget; startp, endp : longint) : string;
procedure qtextsel(txt : qWidget; startp, endp : longint); 
procedure qtextcopy(txt : qWidget); 
procedure qtextpaste(txt : qWidget); 
procedure qtextcut(txt : qWidget); 
function qtextSelEnd(txt : qWidget): longint; 
function qtextSelStart(txt : qWidget): longint;
procedure qtextApplyFont(txt : qWidget); 
procedure qtextSetEdit(txt : qWidget); 
procedure qtextSetNoEdit(txt : qWidget); 
function qtextload(txt : qWidget; filename : string) : boolean; 
function qtextsave(txt : qWidget; filename : string) : boolean;

- textové editaèní pole.  Procedura qtextsetp nastavuje kurzor na pozici i znakù
  od zaèátku, qtextinsert vlo¾í øetìzec na pozici kurzoru, 
  qtextaddline pøidá øádek na konec.
  startp a endp v procedurách qtextdel, qtextstring a qtextsel 
  je poèátek a konec úseku textu (endp=-1 znamnená a¾ do konce souboru).
  Procedura qtextsel oznaèí úsek textu, qtextcopy kopíruje 
  do schránky,  qtextSelStart a qtextSelEnd vrací polohu poèátku a konce
  oznaèeného textu. Font v komponentì text je dán promìnou qfontname,
  qtextApplyFont nastaví v celém textu font po zmìnì hodnoty qfontname (qfontname
  se urèí v dialogu qFontSelect nebo funkcí qFont, také je mo¾né pøed
  voláním qStart nebo qFont nastavit jméno fontu do promìnné qfontname0).
  Procedura qtextSetNoEdit nastaví text jen pro ètení. 
  Pøíklad pou¾ítí viz qtext.pas.
   


6. list

function qlist(width, height:integer; sorted: boolean;
                   onchange, on2click :tprocedure ) : qWidget;
procedure qlistAdd(list: qWidget; text : string);   
procedure qlistInsert(list: qWidget; text : string);  
procedure qlistDelRow(list: qWidget);  
procedure qlistClear(list: qWidget); 
function qlistItem(list: qWidget) : string; 
procedure qlistselect(list: qWidget; row : integer); 
function qlistselrow(list : qWidget) : integer; 
function qlistrowcount(list : qWidget) : integer;

- seznam umo¾òující vybrat jeden øádek, pøi zmìnì vybraného øádku probìhne
  procedura onchange, pøí dvojkliku na øádku (nebo stisknutí enter) probìhne
  procedura on2click. Podrobnosti viz qlist.pas.



7. dialogy

function qFileselect(caption: string; filename:string ): string; 
function qFontSelect(caption: string ) : string; {set qgdkfont, return fontname}
function qClrSelect(caption: string) : longint;  {RRRGGGBBB,  999000000 is red}
function qdialog(message, but1capt, but2capt, but3capt : string): integer;
function qinput(message, inputstr : string): string;

- rùzné dialogy. qdialog vrací èíslo stisknutého tlaèítka, qinput vrací 
  u¾ivatelem upravený øetìzec inputstr. Podrobnosti viz qdialog.pas.




8. dal¹í procedury

procedure qshow(widget : qWidget); 
procedure qhide(widget : qWidget);
procedure qsetfocus(wid: qwidget);
function qsecwindow(caption: string) : qWidget;
procedure qshowsec(secwind : qwidget); 
procedure qshowsecmodal(secwind : qwidget); 
procedure qhidesec(secwind : qwidget); 
procedure qtimerstart(interval : longint;  proc : tprocedure  );
procedure qMainIter;
function qprogress(width :integer): qWidget;
procedure qprogressSet(progress:qwidget; percent:integer); {percent 1..100}
procedure qshowW32console; 
procedure qhideW32console;

- qshow a qhide uká¾e nebo skryje komponentu, qsefocus nastaví focus na
  komponentu (pouze pro qedit, qtext a qlist),
  qsecwindow vytvoøí sekundární okno, k jeho zobrazení a ukrytí slou¾í
  qshowsec a qhidesec. 
  qtimerstart spou¹tí po intervalu v ms proceduru.
  qMainIter umo¾òuje, aby probíhala programová smyèka gtk i bìhem del¹ích
  výpoètù a aby u¾ivatelské prostøedí zùstalo aktivní. Viz qmainit.pas.
  qshowW32console a qhideW32console má význam jen v M$ win32, uká¾e nebo
  skryje dosové okno, ze kterého je program spu¹tìn a do kterého vypisuje
  chybové zprávy.



9. grafika

procedure qdrawstart(width, height : integer; 
           onstart, procclick, procmove : tprocedure ); 
function qsetClr(rgb : longint ) : boolean;      {RRRGGGBBB,  999000000 is red}
procedure qpoint( x, y : integer );  
procedure qrect( x, y, width, height : integer );  
procedure qfillrect( x, y, width, height  : integer);
procedure qfillellipse( x, y, width, height  : integer); 
procedure qellipse( x, y, width, height  : integer); 
procedure qline( x1, y1, x2, y2: integer ); 
procedure qfont(size:integer); 
procedure qdrawtext(x,y : integer; s : string);  
procedure qdrawpic(x, y  : integer; pic: qpic );  
procedure qgetpic(x,y, width, height  : integer; var pic : qpic ); 
procedure qpicFromXpm(xpmfile : string; var pic : qpic); 
procedure qpicFromXpm_d(data : ppgchar; var pic : qpic); 
procedure qupdateRect(x, y, w, h : integer);

-  qdrawstart vytvoøí komponentu qdrawArea, která mù¾e
   v celém programu  být jen jedna.
   Procedura onstart probìhne na poèátku po inicializaci grafiky, 
   procedury procclick a procmove probíhají pøi kliknutí my¹i na qdrawArea,
   nebo pøi pohybu my¹i a naplní promìnné qx, qy a qmousebut.
   Procedury kreslí barvou nastavenou v qsetClr. Pro barvy mo¾no 
   pou¾ít konstanty qWhite, qBlack, qRed, qGreen, qBlue, 
   qYellow, qGray, qPurple, qAqua a qBrown.
   qdrawtext po¾ívá font daný promìnou qfontname, viz poznámku o fontu 
   u komponemty text. Aby nebyl nastaven nevhodný font je tøeba pøed
   voláním qStart zadat jméno fontu do promìnné qfontname0. (napø.:
   qfontname0:='Sans Bold 12';)
   Xpm obrázky mù¾eme mít naèteny v promìných typu qpic, 
   Pøi zobrazení procedurou qdrawpic se bere v úvahu i prùhledná barva.
   Nastavíme-li promìnou qAutoupdate na false musíme pak v¾dy
   zmìny v grafice zviditelnit procedurou qupdateRect (vhodné provádíme-li
   více zmìn v obrázku najednou).


10. posuvné objekty v popøedí grafiky

qfgobj = object
  constructor newFromXpm(fname : string; x, y, width, height : integer);
  constructor newFromXpm_d(data:ppgchar; x, y, width, height : integer);
  procedure  setPic(Pic : qpic);  
  procedure move(x,y : integer);   
  procedure show;   
  procedure hide;  
  procedure tobk;   
  procedure tofg;  
  destructor free;  
end;

- objekty podporují prùhlednou barvu, mají o¹etøeno, aby pøi posunu
  nedcházelo k blikání.
  Objekt deklarujeme  var picobj : qfgobj;
  vytvoøíme           picobj.newFromXpm('pic.xpm', 10, 20, 64, 64);
  uká¾eme             picobj.show;
  posuneme            picobj.move(15, 20);
  zmìníme             picobj.setPic(pic);
   (pic vytvoøíme tøeba procedurou qpicFromXpm)
  dáme za ostatní objekty   picobj.tobk;
  ...
  Viz camel.pas
  
  
  
11. pomocný program xpm2pas

Pøevádí xpm obrázky na programovou jednotku. Obrázky pak budou pøímo
zakompilovány do programu a nebude potøeba je mít v samostatných souborech.
Xpm obrázky musí mít ménì ne¾ 8000 barev a ¹íøku men¹í ne¾ 127 bodù,
pro ménì ne¾ 90 barev mù¾e být ¹íøka a¾ 255 bodù. Do jedné programové
jednotky mù¾e být dáno více obrázkù, jednotka dostane název  xpmpic.pas.
Na jednotlivé obrázky se pak budeme odkazovat v procedurách po¾adujících
xpm data názvem "názevXpmSouboru_d"



12. poznámky k utf-8 a iso-8859-2 kódování znakù

Gtk a stejnì i qgtk2.pas podporují kódování unicode utf-8.
Nepou¾ívá-li systém plnì kódování utf-8, je pro správné zobrazování 
neascii znakù tøeba tøeba nastavit promìnnou pas_encoding. 
Je-li v Linuxu nastaveno locale pou¾ívající kódování iso-8859-2 
a chceme-li toto kódování pou¾ívat ve zdrojovém kódu programu 
a ve vstupech a výstupech pak je potøeba zadat pas_encoding:=e_8859_2. 
(V M$ windows je treba podobne nastavit pas_encoding:=e_1250)
(Podrobnosti viz qlocale.pas)


13. License: GNU GENERAL PUBLIC LICENSE 

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or  
(at your option) any later version.  

This program is distributed in the hope that it will be useful,   
but WITHOUT ANY WARRANTY; without even the implied warranty of  
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.


  (c) 2002-2005 Jirka Bubenicek  -  hebrak@yahoo.com   

