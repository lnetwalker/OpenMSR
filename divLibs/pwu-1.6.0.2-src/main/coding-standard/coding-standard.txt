Coding Standard Article written by PSP 1.6 developer Lars aka L505

--------------------------------------------------------------------------------
 Powerful Web Utilities Coding Standard : Syntax, Naming Schemes
--------------------------------------------------------------------------------

 PSP/PWU went through syntax evolution.. different developers lead the project
 at different times. In PWU 1.5 and 1.6 the main developer chose a different 
 syntax which was kept mainly backward compatible with each other. Previous 
 versions of PSP such as 1.3 and 1.4 were not backward/forward compatible with 
 each other. PWU 1.7 will remain mainly backward compatible with 1.6 and 1.5.
 
 PSP also went through a half-attempt name change - Powerful Web Utilities. Many
 people were confused about PSP being some sort of ASP or JSP like web scripting
 language. The Powerful Web Utilities name has not caught on yet and many users
 still reference the project as PSP. The only reason I use PWU more often these
 days, is because I don't think PSP accurately describes this project.
 
********************************************************************************
  Powerful Web Utilities 1.6.x  
********************************************************************************

 -----------------------------------------------------------------------------
  Unit Naming: 
 -----------------------------------------------------------------------------
   Unique units such as "pwu.pas" and "pwubuffer" and "pwumailprep" are used 
   since there may be five million "web.pas" units out there. We don't want to 
   conflict with other web.pas units, so pwu.pas and pwuotherunit is the main 
   naming scheme.
   
   If a unit is unique enough as is, then it may or may not be named without 
   the pwu prefix. For some units, terseness is chosen for a reason, such as 
   sds or htmw versus  pwuHtmlWrapper or pwuSimpleDataStorage for obvious 
   reasons.
  
 ------------------------------------------------------------------------------
  Source Syntax:
 ------------------------------------------------------------------------------
 
  ..........................................................................
                                                                              
                              ENUMERATIONS
  ..........................................................................

     EmailPriority = (pNormal, pHigh, pLow);

     Lowercase first letter. There is no need to use epNormal if pNormal is 
     clearer and does not conflict with other enumerations in the source file.
                                                                              

  ..........................................................................
                                                                              
                              INDENTATION
  ..........................................................................
    var
      s: string; //notice variable is on new line
    begin
      webwrite('text');
    end;
  ..........................................................................

     Description:

       Pascal is a clear language and 8 space or 4 space indentation is not
       needed. Too much whitespace makes the eyes jump all over the screen.
       Two spaces are fine for indentation of pascal code.


  ..........................................................................

                          CONFIG FILE VARIABLES                                      
  ..........................................................................

     config_variable
  ..........................................................................

     Description:

       Lower case underscore syntax naming sheme for all variables in
       PWU configuration file. 

  ..........................................................................

                         FUNCTIONS AMD PROCEDURES        
  ..........................................................................

     SomeFunction_suffix
     SomeFunction
     Unit.SomeFunction
     unit.webwrite
  ..........................................................................

     Description:

       Procedures and functions are usually in the form of SomeFunction or
       somefunction. 

       If the function is clear enough as lowercase, use lower case. For example
       the webwrite function is clear in lowercase. A function such as makeerr 
       if it existed, would not be as clear. MakeErr would be clearer.
       
       If the functions are stored in another unit and there is any chance the 
       code will be clearer, Unit.SomeFunction dot notation can be used to 
       reference that unit namespace. This also reduces conflict if any 
       functions in another unit have similar names to other units elsewhere. 

       For example, since getenvironmentvariable exists in sysutils and windows
       units, always use dot notation to reference which one you are using.
     
       Also, sds.query() is recommended over Query()

     Special cases:  

       SomeFunction_suffix is a special case where the function performs
       a similar activity to SomeFunction. The suffix means that something 
       special happens with the function. For example GetVar_S may imply a 
       special version of GetVar. Read the docs or the unit notes to find out 
       what the suffix stands for.

       The underscore suffix scheme should only be used when really neccessary, 
       for example instead of using SomeFunctionSpecialEdition you can use
       SomeFunction_SE or SomeFunction_custom.  This lets the user know that
       SomeFunction is similar to SomeFunction_SE, just that the _SE version of
       the function is a special. It stands out, and it should.
       
  ..........................................................................


********************************************************************************
  Powerful Web Utilities 1.5.x
********************************************************************************

   Same as PSP 1.6.X
    

********************************************************************************
  PSP 1.4.x
********************************************************************************

   underscore_style_procedure naming scheme (ANSI C)
   web_print_ln
   sds_query

   The disadvantage I found with this syntax and why I chose psp 1.6 syntax was
   that I couldn't add suffixes to the functions - suffixes could not be 
   distinguished from the verb or main action of the function.
   Is ln in web_print_ln a suffix? Or is it just part of the function name.

   In psp 1.6 one could easily tell what LN means depending on what syntax
   the coder chooses:
     WebPrint_ln 
       Must not mean webprintline because the ln is a suffix.
       LN could mean Length Notification Returned..
     WebPrintLn 
       Must mean WebPrintLine because LN is not a suffix, it is part of the 
       action or verb.
       
   In psp 1.4.x we cannot tell the difference between web_print_ln with ln
   used as a suffix, or web_print_ln with ln used as part of the verb. They
   are both the same to the eye no matter what we intended.
  
   For more information on the PSP 1.4.X naming scheme and syntax, see the
   PSP 1.4.X documentation and the psp unit files in the PSP 1.4.X distribution.

********************************************************************************
  PSP 1.3.x
********************************************************************************

   Underscore_PascalCase naming scheme (Custom Pascal & ANSI C mixture)

   The prefix before the underscore was the unit the procedure was located in.
   
   For more information on the PSP 1.3.X naming scheme and syntax, see the
   PSP 1.3.X documentation and the psp unit files in the PSP 1.3.X distribution.

   This style was a bit too verbose and awkward, for example:
     Web_SomeFunction
     SDS_SomeFunction
   
   
   
