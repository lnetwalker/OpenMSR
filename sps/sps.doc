


                        S P S - SIMULATOR V 1.7.3-rc5
                                SPS4Linux ( i386 )
                                  OpenSPS
                     (c) 1990-2007 by Hartmut Eilers

              News und Info unter: http://www.eilers.net/sps/

      English Documentation may be found in sps-e.doc. Change the Link for
      sps.doc to sps-e.doc to read the docs in the IDE!

      Aus SPS4Linux wird OpenSPS, denn seit V 1.7.3-rc4 laeuft SPS jetzt
      auch unter Windows. Getestet mit Win2K im VMWare Player.
      Als IO Unit wird der IO Warrior 40 unterstuetzt. Die Docu gilt
      mit Ausnahme der unterstuetzten IO Hardware fuer alle Betriebssysteme.
      Linux unterstuetzt: DIL/Net PC, PIO, Printerport, Joystick und 
      IO Warrior.
      Windows unterstuetzt ausschliesslich den IO Warrior, wodurch im Moment
      unter Windows keine analoge Eingabe zur Verfuegung steht. In Elektor
      Ausgabe 12/2005 wurde ein A/D Wandler auf Basis des IO Warriors 
      vorgestellt (laeuft unter Windows und Linux) .
      Die Unterstuetzung dafuer ist in Arbeit.

      Alles zur externen Steuerung finden sie im Programm run_sps.

      Ab Version 1.7.1  unterliegt SPS4Linux der GNU General Public Licence;
      siehe http://www.gnu.org/ fuer Details.

      Neben dem Binary ist der komplette Source enthalten. Mit dem FPC
      Compiler kann der source compiliert werden.

      Wer Lust hat an SPS mitzuarbeiten ( egal in welcher Form ) melde
      sich bitte via E-Mail bei Hartmut@eilers.net

      Wichtig: gebt mir Feedback ( Anwendung, Bugs, Vorschlaege) an:
      opensps@eilers.net

      Flames to /dev/null

      Credits: ich habe unmengen an freien Delphi und Pascal sourcen 
      studiert und mit dem dort gelesenen dieses Programm geschrieben. 
      Vielen Dank an alle Delphi und Pascal opensource Programmierer 
      und alle Sponsoren die mich unterstuetzen.

      1) Ueberblick

         Der SPS - Simulator ist eine Entwicklungsumgebung zur Er-
         stellung Speicherprogramierbarer Steuerungen. Er enthaelt
         alle notwendigen Funktionen um eine:
              1 - AWL zu editieren
              2 - AWL zu archivieren (laden,speichern,drucken)
              3 - AWL zu testen

         ( AWL = Anweisungsliste, enpricht quasi dem SPS Programm)

         Verfuegt man ueber eine handelsuebliche 8255 PIO - Karte, den IO 
         Warrior 40, einen DIL/NetPC oder einen Drucker Port ist es
         moeglich eine Steuerung mit dem PC aufzubauen.

         Dank dem Daemon run_sps koennen Sie mit Ihrem PC
         wie gewohnt arbeiten, waehrend im Hintergrund Ihre Steuerung
         laeuft. Ueber RUN_SPS erfahren sie weitere Details in der
         Documentation RUN_SPS.DOC. ( Diese muss noch erstellt werden)

         Diese Dokumentation koennen Sie natuerlich auch ausdrucken.
         ( sps.doc )

         Eine sehr gute Einfuehrung sind die im HUETHIG Verlag 
         erschienenen Buecher von A. Auer "SPS Aufbau und Programmierung"
         und "SPS Programmierung Beispiele und Aufgaben"

         An dieser Stelle mein Dank an A. Auer, meinen Prof Ende der
         achtziger Jahre in Isny, der mich dazu motivierte das
         Programm zu schreiben.

      2) Bedienung

         Nach Start des Programmes durch Eingabe von SPS und Be-
         taetigung der RETURN - Taste meldet sich das Programm
         mit dem Titelbild und der Versionsangabe. Diese Meldung
         wird nach kurzer Zeit geloescht und es erscheint in der
         1.Zeile des Bildschirms das Hauptmenue.

         Mit den Shell Variablen LINES und COLUMNS koennen Sie die
         Groesse des Terminals einstellen ( default 24 Lines und 80
         COLUMNS )
         Durch Eingabe der farbig abgesezten Anfangsbuchstaben
         oder der Pfeiltasten und RETURN   
         kann der Anwender zwischen folgenden Punkten waehlen:

              - <F>ile :  enthaelt alle Menuepunkte um eine
                          AWL zu
                              - loeschen
                              - laden
                              - speichern
                          sowie:
                              - Directory anzeigen
                              - Standardverzeichnis wechseln

              - <E>dit :  erlaubt das Erstellen und Aendern einer AWL

              - <R>un :   Starten einer AWL

              - <K>op :   Ausgabe der AWL als Kontaktplan ( KOP )

              - <D>ocu :  Lesen der bzw. Suchen in der Online Dokumentation

              - <Q>uit :  Beenden der Entwicklungsumgebung



      2.1 Erklaerung der Menuepunkte

          Bei Auswahl der Menuepunkte wird ein Fenster geoeffnet.
          Im oberen Rahmen des Fensters steht in eckigen Klammern
          der Name des Menuepunktes, im unteren Rahmen in spitzen
          Klammern wie man diesen Menuepunkt beenden kann.

      2.1.1 Der Menuepunkt FILE

          Nach Eingabe von F im Hauptmen� erscheint das Auswahlmen�
          FILE. Sie k�nnen jetzt wieder durch Eingabe des farbig unter-
          legten Anfangsbuchstaben ,der Pfeiltasten und RETURN 
          zwischen folgenden Punkten w�hlen :
               N - New = l�schen des Speichers
                   ( d.h. L�schen der aktuellen AWL im Speicher )

               L - Laden einer AWL von Disk / Platte

               S - Sichern der aktuellen AWL auf Disk/Platte

               P - Ausdruck der im Speicher befindlichen AWL


               D - Directory anzeigen

               C - wechseln des Standarddirectories


          Alle Pfad- und Dateiangaben im Men� FILE m�ssen in der
          DOS Syntax angegeben werden. ( z.B.: *.* nicht * )
          Wird kein Pfad angegeben bezieht sich der Befehl auf das
          aktuelle Laufwerk/ bzw. Pfad. ( Laufwerk ;-) ; es kommt halt
          aus der DOS Welt )

          Wird keine Dateinamenserweiterung angegeben wird automatisch
          .SPS angeh�ngt.

      2.1.2 Der Men�pkt EDIT

          Nach Eingabe von E aus dem Hauptmen� befindet man sich
          im Editorfenster.

          Es kann nun eine AWL erstellt oder ge�ndert werden.

          Aufbau einer Zeile der AWL:
              1. Zeilennummer:
                 Der Editor schl�gt jeweils die n�chste aktuelle
                 Zeilennummer vor. Will man diese �bernehmen, so
                 mu� keine neue Zeilennummer angegeben werden.
                 Will man jedoch eine bestehende Zeile �ndern
                 so mu� hier die entsprechende Zeilennummer ange-
                 geben werden und die Zeile �berschrieben werden.

              2. Operation (max 3Stellig) enth�lt einen g�ltigen
                 Befehl.

              3. Operand (1 stellig ) enth�lt einen g�ltigen Operanden

              4. Parameter ( max 65535 ) enth�lt den Parameter eines
                 Befehls oder die Nummer eines Operanden.

              5. Kommentar ( max 22 Stellen ) ist optional und nur zu
                 Dokumentationszwecken.


          Alle Komponenten einer Zeile werden ohne Zwischenr�ume
          direkt eingegeben.
          Bsp.: 18 ue1Eingang 1 = Starttaste

          Diese Eingabe wird vom Editor wie folgt umgeformt:

                      18 U   E     1 Eingang 1 = Starttaste
          Bedeutung:   | |   |     | |
                       | |   |     | + Kommentar---------->
                       | |   |     + Parameter
                       | |   + Operand
                       | + Operation
                       + vorgegebene Zeilennummer

          Jede Zeile wird mit RETURN bzw. ENTER abgeschlossen.
          Solange eine Zeile nicht abgeschlossen ist kann sie
          mit BACKSPACE korrigiert werden.
          Nach Abschlu� einer Zeile kann diese nur durch
          �berschreiben ge�ndert werden.

          Folgende Tasten haben im Editor eine Bedeutung:

          EINFG: Einf�gen einer Zeile in die AWL. Nach Eingabe der
              Zeilennummer wird an dieser Stelle eine Zeile ein-
              gef�gt deren Inhalt der NOP Befehl ( No Operation )
              ist. Diese Zeile kann durch �berschreiben ge�ndert
              werden.

          ENTF: L�schen einer Zeile in der AWL . Nach Angabe der
              Zeilennummer wird diese Zeile gel�scht, alle nach-
              folgenden zeilen werden um eine Position verschoben.

          Die Sprungziele bei den Sprungbefehlen werden automatisch
          angepa�t.

          CURSOR UP/DOWN Zeilenweises bl�ttern durch die AWL

          PAGE   UP/DOWN Seitenweises bl�ttern durch die AWL

          BACKSPACE Zeichen links vom Cursoor l�schen

          RETURN Zeile abschlie�en

          ESC Editor verlassen.

      2.1.4 Der Men�punkt RUN

          Durch Eingabe von R im Hauptmen� wird eine AWL gestartet.
          Auf dem Bildschirm erscheint ein Fenster in dem der Zustand
          aller
               - MARKER
               - TIMER
               - COUNTER
               - EING�NGE
               - AUSG�NGE 
	           - Analoge Eingaenge (Joystick) angezeigt wird,
          sowie die Information ob die Steuerung INTERN oder EXTERN
          arbeitet sowie die sog. Zykluszeit. Diese gibt an, wie lange
          ein AWL Durchlauf durchschnittlich dauert.
          Die Zykluszeit wird auch als Kommentar in die letzte Zeile der
          AWL eingesezt. An Hand der Zykluszeit kann die Verz�gerungs-
          zeit der Timer berechnet werden.
          Die Zykluszeit unter Linux stimmt nur sehr, sehr grob
          nicht drauf verlassen!

          Eine AWL wird solange immer wieder abgearbeitet bis ESC be-
          t�tigt wird.

          Folgende Tasten haben eine Bedeutung:

          1-8 Bei Interner Steuerung wird mit jedem Tastendruck der
                Zustand des jeweiligen Einganges getoggelt.


      2.1.5 Menupunkt DOCU

          Durch D im Hauptmenu bzw. die Maus oder die Cursortasten wird
          die Online Dokumentation aufgerufen. Mit PAGE UP bzw. PAGE DOWN
          koennen Sie nun durch die Dokumentation blaettern, oder ueber
          die Taste s die Suchfunktion aktivieren. Mittels ESC verlassen
          Sie die Online Dokumentation und gelangen zuruck ins Hauptmenue.
          Ueber die Suchfunktion koennen Sie nach beliebigen Woerten bzw.
          Wortteilen suchen. Die Schreibweise (gross/klein) wird dabei
          ignoriert. Die Suche beginnt immer am Dokumentanfang und wird
          zum Ende hin fortgesetzt. Falls die Suche erfolgreich war koennen
          Sie ueber ESC die Suche beenden oder mit einer beliebigen Taste
          fortsetzen.
          Die Dokumentations-Datei heisst SPS.DOC und muss sich
          in dem Verzeichnis befinden aus dem SPS.EXE gestartet wurde.
          Da es sich bei der DOC Datei um eine reine ASCII - Datei handelt
          koennen Sie selbst die Dokumentation erweitern. Dazu benoetigen
          Sie lediglich einen Editor der ASCII Dateien erzeugen kann.
          (z.B.: vi, emacs, ... ). Dabei muessen Sie jedoch die Zeilen-
          laenge von max. 76 Zeichen beachten !!!! Auch keine Tabs verwen-
          den, sondern schoen mit blanks formatieren :)

      2.1.6 Menuepunkt QUIT

          Durch Q im Hauptmenue wird die Entwicklungsumgebung verlassen
          Befindet sich zu diesem Zeitpunkt eine AWL im Speicher, die
          noch nicht gespeichert wurde, haben sie die Moeglichkeit
          ueber den Menuepunkt File diese ZU sichern.


      3. Die Befehle der AWL:

          Die Befehle der AWL koennen sowohl in Ihrer deutschen Schreibweise
          als auch mit dem englischen Pendant geschrieben werden.
          Das gilt auch fuer die Bezeichnung der In- Outputs, Merker oder
          Zaehler. Der Interpreter kann mit einer beliebigen Mischung korrekt
          umgehen. Sie sollten sich jedoch eine einheitliche Schreibweise
          angewoehnen. Alle Beispiele benutzen jeweils die erstgenannte
          Schreibweise. Wenn es verschiedene Alternativen gibt, sind sie 
          jeweils mit (de) fuer deutsch oder (en) fuer englisch gekennzeichnet.

           U    der Akkuinhalt wird mit angeg. Oper. UND verknuepft.
                Englische Schreibweise A
           UN   der negierte Akkuinhalt wird mit dem angegeb. Oper.
                Englische Schreibweise AN
                verknuepft.
           U(   der Akkuinkalt wird mit dem log. Ergebnis des Klammer-
                ausdruckes und verkn.  Englische Schreibweise A(
           UN(  der neg. Akkkuinhalt wird mit Ergebnis des Klammeraus-
                druckes UND verknuepft.  Englische Schreibweise AN(

           O    der Akkuinhalt wird mit Oper. ODER verk.
           ON   Siehe oben jedoch ODER Verknuepfung.
           O(
           ON(
           =    Zuweisung, damit kann einem Marker, Timer oder  Ausgang
                der Akkuinhalt zugewiesen werden. mehrfach Zuweisungen
                sind erlaubt !
           =N   wie oben, jedoch der negierte Akkuinhalt.
           S    damit kann ein Ausgang oder Merker auf 1 gesetzt werden
           R    damit kann ein Ausgang oder Merker auf 0 rueckgesetzt werden
           J    unbedingter Sprung. Es wird immer an die Stelle gespprungen
                die als Parameter angegeben ist. Alternativ SP (de) und 
                JP (en)
           JI   jump if- begingter Sprung der nur ausgefuehrt wird wenn
                akkuinhalt 1 ist. Ebenso koennen Sie alternativ auch JC (en)
                oder SPB (de) verwenden.
                Bei allen Sprungbefehlen beachten: Rueckspruenge sind nicht 
                erlaubt!
           TE   Timer einschaltverzoegert. Bsp: zahler.sps
           ZR   Zaehler rueckwaerts.         Bsp: timer.sps
           K    Konstante fuer Zaehler oder Timer
           NOP  No Operation
           EN   oder auch PE (de) oder EP (en)  = Ende der AWL.
           LT   Less than - kleiner als ( analog Verarbeitung ) 
           GT   Greater than - groesser als ( analog Verarbeitung )
           EQ   Equal - gleich ( analog Verarbeitung )
                Beispiel zur Analogverarbeitung siehe Punkt 4.4
           $    execute (ausfuehren externer Programme ) 
                Bsp: flankenlogger.sps 


           Siehe  Beispiele!


      3.1 die Bezeichner der AWL

           Die AWL Unterstuetzt digitale Ein- und Ausgaenge, Softwarezaehler, 
           Timer und Merker sowie analoge Eingaenge.
           Folgende Bezeichner unterstuetzt die AWL

           deutsch     englisch      Bedeutung
              E            I           Eingang
              A            O           Ausgang
              Z            C           Zaehler
              T            T           Timer
              M            M           Merker
              K            K           Konstante

           In der AWL koennen die Bezeichner beliebig gemischt verwendet werden,
           um der Lesbarkeit Willen sollten Sie jedoch eine Schreibweise 
           einhalten.

      3.2 Technische Daten des SPS Simulators

           AWL Laenge max 2000 Zeilen
           128 Ausgaenge ( A1 - A128 oder O1-O128 )
           128 Eingaenge ( E1 - E128 oder I1-I128 )
           16 Zaehler   ( Z1 - Z16 oder C1-C16 ) 
           16 Timer    ( T1 - T16 ) *
           4 Analog Eingaenge ( J1 - J4 )
           255 Marker  ( M1 - M255) davon M64 = Takt mit 2*Tz
                                          M63 = Takt mit 4*Tz
                                          M62 = Takt mit 8*Tz

           SPS4Linux ist NICHT Echtzeitfaehig!
           Die Pio muss mit einem 8255 aufgebaut sein und
           im Addressbereich 300h-3FFh liegen.
           Derartige PIO's wurden schon in vielen Fachzeit-
           schriften zum Selbstbau vorgestellt. Fertige Karten
           gibt es unter anderem bei Decision Computer

           Neben der PIO funktioniert ausserdem der Printerport sowie
           die IO Warrior Serie von Code Mercanaries als Ein-Ausgabe Einheit.

           Bei Verwendung des Dil/NetPC ist Port 0 Eingang und Port1
           Ausgang, Port 0 wird auch fuer die Softcounter genommen.

           Zur analogen Datenerfassung steht der Joystick Port zur Verfuegung.

           Alle Ein- und Ausgaenge haben TTL Pegel.

           Die Timer haben unterschiedliche Zeitbasen:
           T1-T4	Basis 1 Sekunde
           T5-12	Basis 100 ms
           T13-T16  Basis Zykluszeit 

           Damit stehen Verzoegerungen von 100 ms bis 65535 sec,
           was etwa 18 h entspricht.
           Die Timer sind Softwaretimer, wie exakt sie sind kann ich noch
           nicht sagen.
           Daher empfehle ich bei Verzoegerungen im Sekundenbereich die
           100ms Timer T5-T12.

           Falls die Zykluszeit die Timebasis ueberschreitet, laufen die
           Timer zu langsam !


      3.3 Konfiguration

       Zur Konfiguration editieren Sie die Datei /etc/sps.cfg
       mit dem Editor Ihrer Wahl.

      4. Beispiele zur Syntax

      4.1 der UND Befehl und die Zuweisung:

            Folgende einfache Schaltung soll in eine AWL umgesetzt
            werden:
                     _____
            E1------!     !
            E2------!  &  !----A1      A1=E1*E2*E3
            E3------!_____!

            Es ergibt sich folgende AWL: 
                  1 U   E  1
                  2 U   E  2
                  3 U   E  3
                  4 =   A  1
                  5 EN

            Erlaeuterung:  Bei Start der AWL wird das in 3. als Akku
                  bezeichnete Register mit einer log. 1 geladen.
                  Durch die Anweisung U E 1 wird dieser Akkuinhalt
                  mit dem Wert des  Einganges E 1  UND verknuepft.
                  Das Ergebnis wird wieder im Akku gespeichert. Das
                  bedeutet der Zustand des Einganges E1 wurde in den 
                  Akku uebernommen, denn nach den Regeln der Boolschen
                  Algebra ergibt E1 * 1 = E1.
                  Dieser Akkuinhalt wird dann in Zeile 2 mit dem Wert 
                  von E2 UND verknuepft und anschliessend  wird dieses
                  Ergebnis (der Akkuinhalt) mit E3 UND verknuepft.
                  In Zeile 4 wird dieses Ergebnis dem Ausgang A1 zuge-
                  wiesen.
                  Zeile 5 EN zeigt dem Simulator dass er am Ende der
                  AWL angekommen ist und nun wieder mit Zeile 1
                  beginnen muss.
                  Man sieht hier deutlich, dass sich alle Operationen
                  immer auf den Akkuinhalt beziehen.

                  Wird Zeile 4 in "4 =N  A  1" geaendert ergibt sich
                  folgende Schaltung:

                     _____
            E1------!     !               ________
            E2------!  &  !o---A1      A1=E1*E2*E3
            E3------!_____!

                  denn der Akkuinhalt wird vor der Zuweisung negiert.


      4.2 Die ODER Verknuepfung:

            Versuchen Sie jetzt doch einmal die folgende Schaltung:

                     _____
            E1------!     !                        
            E2------! >=  !----A1      A1=E1+E2+E3
            E3------!_____!

            Wahrscheinlich sieht Ihre Loesung so aus:

                  1 O   E  1
                  2 O   E  2
                  3 O   E  3
                  4 =   A  1
                  5 EN

                  Diese Loesung ist jedoch falsch !
                  Warum ? 
                  In Zeile 1 steckt der Fehler, denn wie weiter
                  oben erlaeutert wird bei jedem Durchlauf der
                  AWL zu Beginn der Akku mit dem Wert 1 geladen.
                  ( Uebrigens auch nach der jeweils letzten Zuweisung
                  mit = =N S oder R)
                  Aus der Boolschen Algebra ergibt sich aber
                  E1 + 1 = 1
                  Daher haben wir jetzt folgendes Ergebnis:
                  1+E2+E3= A1 was bedeutet A1 ist immer 1.

                  Richtig muss es daher lauten:

                  1 U   E  1
                  2 O   E  2
                  3 O   E  3
                  4 =   A  1
                  5 EN

                  Sie sollten sich daher merken, jeden Satzanfang
                  (Start der AWL oder 1.Zeile nach einer Zuweisung)
                  muessen Sie mit U .. beginnen damit der AKKU 
                  korrekt geladen wird.

                  Probieren Sie das ruhig alles mal aus.

      4.3  Klammeroperation :

            In der Liste der Befehle haben Sie sicher auch die Klammer-
            Befehle gesehen.
            Im folgenden erlaeutere ich kurz ihre Syntax.
            Dazu betrachten wir folgende AWL:

                  1 U   E  1
                  2 O(  
                  3 U   E  2
                  4 U   E  3
                  5 )
                  6 =   A  1
                  7 EN

            Versuchen wir das ganze mal aufzudroeseln:
            In Zeile 1 wird E1 in den Akku geladen. Ab 2 passiert
            nun folgendes: der Inhalt des Akkus wird mit dem Er-
            gebnis der Klammeroperation ODER verknuepft, und dann
            dem Ausgang A1 zugewiesen. Eigentlich noch ganz klar
            und nachvollziehbar. Dabei muss jedoch eines beruecksichtigt
            werden: 
                    Beim Oeffnen der Klammer wird der Zustand des 
                    Akkus intern gespeichert und er wird wieder
                    auf 1 gesetzt. Das heisst in zeile 3 haben wir 
                    wieder eine Verknuepfung 1*E2=E2 ,also eine 
                    Ladeanweisung. Erst beim Schliessen der Klammer
                    wird der gespeicherte Akkuinhalt im dem aktuellen
                    Akkuinhalt ODER verknuepft und dann A1 zugewiesen.

                    Die Schaltung sieht also so aus:
                              _____
            E1---------------!     !                 
                  _____      ! >=  !---A1
            E2---!     !  !--!_____!
                 !  &  !--!                
            E3---!_____!


            Probieren Sie jetzt selber einmal mit den verschiedenen
            Verknuepfungen U / UN / U( / UN( / O / ON / O( / ON(
            einfache Funktionen aus .

      4.4 Analogverabeitung:

            Analoge Signale koennen auf kleiner, gleich oder groesser
            verglichen werden. Ein kleines Bsp. zeigt das Prinzip:

                    1 U	J     1
                    2 LT      128
                    3 =	A     1
                    4 U	J     2
                    5 GT      128
                    6 =	A     2
                    7 U	J     3
                    8 EQ      128
                    9 =	A     3
                   10 EN

            mit der Ladeanweisung U J 1 wird der Wert des analogen Eingangs
            in den ANALOG_AKKU geladen. die Anwesiungen in den Zeilen 2,5 und
            8 vergleichen den ANALOG_AKKU mit der angegebenen Konstanten
            und setzen den AKKU auf 1, wenn der Vergleich wahr ist.
            Dieser Wert wird dann den Ausgaengen A1-A3 zugewiesen.

            Die Steuerung der Analogeingaenge 1-4 in der Entwicklungsumgebung
            erfolgt ueber die Tasten q w e und r. Mit jedem Tastendruck wird
            der entsprechende Eingang um 1 erhoeht. Bei Ueberlauf der 8Bit wird
            der Eingang wieder auf 0 zurueckgesetzt.
    4.5 Execute
         Ist der Akkunhalt 1 wird das Progamm aufgerufen, welches im Comment
         steht. Der Returncode des programmes wird in den analog akku geschrieben.

            Vor allem eines beachten :
                  Diese Ausfuehrungen sollen Ihnen nur erlaeutern wie
                  dieser Simulator arbeitet. Mehr ueber SPS und
                  die Programmierung erfahren Sie in der Literatur
                  rund um das Thema SPS und den Beispielen.
                  Beachten Sie die *.doc Dateien zu den Beispielen!!


 5. Kontaktplan ( KOP )

    Ausgabe der AWL als Kontaktplan oder kurz KOP.
    Die Syntax entspricht meines Wissens nach Simatic Step 5.
    Folgende Befehle des AWL Befehlumfanges sind implementiert:

    AWL Cmd     KOP             Kommentar
        U                       alt. A
        O
        UN                      alt. AN
        ON
        =N      -|NOT|-
        TE      -(SE)-          Konstante in Beschriftung
        ZR      -(ZR)-          Konstante in Beschriftung
        EN      |-END-|         alt. PE EP
        S       -(S)-
        R       -(R)-
        NOP                     Leerzeile
        $       -(execute)-     Commando in Beschriftung

 6. Disclaimer

    Der Programmierer weisst Ausdruecklich darauf hin, dass er weder
    fuer direkte oder indirekte Schaeden, die aus oder durch die 
    Benutzung der Software enstanden sind Haftbar gemacht werden kann.


    ACHTUNG: Benutzung des SPS Simulators unter LINUX!!!
          Sie muessen  beachten, dass unter LINUX
          die Zykluszeit nicht konstant ist (Multitasking!!!)

          Steuerungen im allgemeinen: Bitte immer Vorsorge treffen
          was eine Steuerung "macht" wenn der Rechner, das Programm
          oder wer sonst auch immer verueckt spielt.

    Wie immer: Der Programmierer uebernimmt fuer nichts eine Verantwortung
    vor allem nicht fuer das was Ihr damit steuert; bzw die
    Umgebung Eurer Steuerung.

    Vorschlaege, Kritik etc an: hartmut@eilers.net


 7.History

          Entstanden ist SPS waehrend meiner Ausbildung. Grund war 
          damals die schlechten Tools. 1989 gab es, zumindest in
          meiner Umgebung, keine Tools, die auf einem PC liefen
          und einem die Entwicklung und den Test von AWLS erlaubten.
          Also setzte ich mich dran, und begann damit erste Versionen
          zu programieren. Meine damalige Entwicklungsumgebung:
          Ein PC XT kompatibler PC mit 8088 Prozessor, Herculeskarte
          20 MB Festplatte und 640 kB RAM. Auf dieser Hardware lief
          MS-DOS Version 3.2, sowie Turbo Pascal, zuerst als Version
          3.??? spaeter Turbo Pascal 5.0.
          Etliche meiner Schulkammeraden benutzten mit mir das
          Programm. Die spaetere Weiterentwicklung habe ich dann nur
          noch aus 'Spass an der Freud' gemacht. Dabei habe ich 
          Features eingebaut, die 1. nie und nimmer geplant waren
          (z.B. Mousesupport ) und die 2. mit kaeuflichen Units besser
          und einfacher funktioniert haetten. ( Bsp. Turbo Vision
          als Oberflaeche ) Mir ging es aber dabei um den Spass und
          das Wissen, wie sowas funktioniert. Im September 93 machte
          ich die letzten Aenderungen an der DOS Version. 
          Bis ich am 25.10.97 FPK Pascal auf meiner Linux Maschine
          installierte und etwas brauchte, um auszuprobieren wie
          gut die Kompatibilitaet zu Turbo Pascal ist.
          Nach nur ca. 10 Stunden hatte ich die jetzige Version
          1.7 Linux Beta 0.1 lauffaehig. Probleme hatte ich lediglich
          bei einigen Konstrukten in Sachen Strings ( val .. copy)
          die ich in einzelne Anweisungen packen musste, sowie bei
          Formatierungsanweisungen bei Stringroutinen wie str.
          Natuerlich liessen sich die 'Goodies' wie Interrupt gesteuerte
          Zeitanzeige in der Menueleiste sowie meine Fummeleien mit MSDOS
          Funtionsaufrufen fuer Mouse und Screen etc nicht portieren.
          Im April 2006 wurde SPS4Linux auf Windows portiert, die Atmel 
          Mikrocontroller sind in Arbeit.

          Okt. 2000 ist meine Entwicklungsumgebung ein alter 
          Pentium 100MHz Notebook mit 32 MB RAM und 800 MB HDD unter 
          Red Hat Linux 6.2.
          Als Compiler verwende ich fpc 1.00, als Editor kommt nedit
          zum Einsatz.
          Okt. 2005 : Pentuim III 1GHz, 512 MB RAM, DEBIAN Sarge.
          FPC 1.9.4

          Wie gehts weiter?
          Es geht unter Linux und Windows weiter, die DOS Version wird
          fuer den DIL/Net PC sowie FreeDOS portiert. Ein Port auf MAC OS X
          ist ebenfalls geplant.

          ein Webserver existiert bereits als Prototyp und soll Java Applets
          die Moeglichkeit geben die Steuerung zu visualisieren.  

          Bis dahin gibt es noch viel zu tun und daher folgt die...

8. Einladung

      Wer mitarbeiten will ist herzlich eingeladen!!!! -> 
      Mail an hartmut@eilers.net
      Bitte meldet Euch auch, wenn Ihr eine Version fuer andere OS
      bauen wollt. ( Ich bin sehr zuversichtlich, dass zumindest 
      grosse Teile des Codes ohne Aenderungen funktionieren. Die IO
      Zugriffe jedoch sind im Moment noch NICHT portabel. 

      Ein grosses weiteres Betaetigungsfeld ist der Docubereich.
      Hier waere eine angepasste Einfuehrung in die hier verwendeten
      Techniken richtig toll. Ebenso gut erlaeuterte Beispiele,
      die eventuell auch noch die Hardwareseite beruecksichtigen.
      Alles in allem freue ich mich ueber jeden, der Lust hat mit-
      zuwirken. Egal in welcher Funktion.

      Alles haengt von den Usern ab. Also gebt mir Feedback.


          Viel Spass mit OpenSPS
          Hucky


