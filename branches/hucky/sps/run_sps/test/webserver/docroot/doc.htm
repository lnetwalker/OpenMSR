<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<html>
<head>
  <title>ePWS  embedded Pascal Web Server - Usage Doc</title>
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
  <meta name="GENERATOR" content="Quanta Plus">
</head>
<body>
  	<center>
		<h2>This is the ePWS Documentation</h2><br>
	</center>
	<p>
	ePWS is copyright by Hartmut Eilers &lt;hartmutATeilersDOTnet&gt;<br>
	It is distrubuted under the terms of the GNU GPL see <a href=www.gnu.org>www.gnu.org</a>
	for license details<p><br>
	you need the following steps to include a webserver in your pascal app:<br>
	<ol>
		<li> start the server
		<LI> setup special URL ( if needed )
		<LI> setup a variable data handler ( if needed )
		<li> call serve_request on a frequent base
			to process the HTML requests.
	</ol>
	the demo program pwserver.pas shows all steps you need to do.
	<br>
	<table border=1 width=600>
	<tr>
	<td bgcolor=lightgrey>
	<small>
	<pre>
1  {$H+}{$MODE OBJFPC}
2  program pwserver;
3
4  { simple HTTP test server for FPC webserver unit		}
5  { (c) 2006 by Hartmut Eilers < hartmut@eilers.net		}
6  { distributed  under the terms of the GNU GPL V 2		}
7  { see http://www.gnu.org/licenses/gpl.html for details	}
8
9  uses crt, webserver;
10
11 var
12 	Seite,
13 	SeitenStart,
14 	SeitenEnde,
15 	Counter	: AnsiString;
16 	cnt	: word;
17 
18
19 procedure embeddedWeb;
20 var
21 	laber	: string;
22 { every time the special URL is called this procedure generates 	}
23 { some dynamic content, delivered to the browser	}
24 begin
25 	SeitenStart:='&lt;html&gt;&lt;body&gt;embedded special data:';
26 	SeitenEnde:=' &lt;br&gt;&lt;a href=/index.html&gt;back&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;';
27 	laber:='&lt;br&gt;Data I last got via HTTP:'+Params+'&lt;br&gt;';
28 	Seite:=SeitenStart+Counter+laber+SeitenEnde;
29 	writeln('embeddedWeb:>Sending Page');
30 	SendPage(Seite);
31	writeln('embeddedWeb:>Page Send, finished');
32 end;

33 procedure embeddedWebReadParams;
34 begin
35	writeln('embeddedWeb:> Got Parameters');
36	writeln('URL=',Url,' Parameters=',Params);
37 end;
38
39 begin
40	{ start the webserver with IP, Port, Document Root and Logfile }
41	start_server('127.0.0.1',10080,'./docroot/','./pwserver.log');
42	{ register special URL for content generated by this program }
43	SetupSpecialURL('/status/index.html',@embeddedWeb );
44	SetupVariableHandler(@embeddedWebReadParams);
45
46	cnt:=0;
47	Counter:='0';
48	
49	// Main loop doing the real stuff for the program
50	repeat
51		{ process the incomming requests }
52		serve_request;
53		{ this is was the real program does: waiting and counting :) }
54		delay(100); 
55		inc(cnt);
56		str(cnt,Counter);
57	until keypressed;
58	stop_server; // stop the webserver
59 end.

	</pre>
	</td>
	</tr>
	</table>
	Explanations:<br>
	<table border=1>
	<tr>
	<td>Line 19-32</td><td> defines a procedure which delivers data from your program <bR>
							in line 43 this procedure is setup as callback procedure for<bR>
							the URL /status/index.html. Any time this URL is called the<bR>
							procedure embeddedWeb is called by the webserver. This proce-<bR>
							dure can generate a HTML Page which is send with the procedure <bR>
							SendPage(Seite); to  the requesting client.</td>
	</tr>
	<tr>
	<td>Line 33-37 </td><td>defines a procedure that handles all data send from a browser<br>
							the data is stored in the global Variable params and the URL <bR>
							which was used with these parameters is stored in the global <bR>
							Variable URL. This gives the oportunity to control your <bR>
							program via web</td>
	</tr>
	<tr>
	<td>Line 41 </td><td>   starts the webserver<br>
							needed parameters are the IP address and portnumber to listen on<bR>
							and of course the Document Root directory with your static data <bR>
							and images and the logfile to log requests and debugging info</td>
	</tr>
	<tr>
	<td>line 43 and 44</td><td> setup the above mentioned procedures as callback <br>
							see above notes.</td>
	</tr>
	<TR>
	<TD>line 52 </TD><TD>calls serve_request to process any outstanding HTTP requests<br>
							you need to do this as often as your programm needs it.<bR>
							take care, that it is possible to slow down your program or<bR>
							do a DoS Attack by flooding your server with requests.</td>
	</tr>
	<tr>
	<td>line 58</td> <td>stops the server<br><br></td>
	</tr>
	</table>
	The simplest server which can serve static content can be done by calling start_server
	and after that frequently serve_requests.

  <center><a href=index.html>back</a></center>
</body>
</html>
